	UPDATES

> 21/3/20
- Added an API request to the coinlayer API. The results are logged
  in the console for now
- The request is triggered by the button 'Get Exchange Rates'
- Added the Rates cmp
- Added react router to navigate between components
- Moved functionality from App cmp to Rates cmp
- Changed the render() method of the App cmp => Now it only renders the
  balance of the wallet's account

> 22/3/20
- Added the Deposit cmp and links to it
- Added back buttons with link to '/' in both Deposit and Rates cmps

> 23/3/20
- Added transferMoneyToAccount and transferMoneyToContract cmps
- Added Routes - Links to them
- Created the state of the Deposit cmp
- Created the credit card controlled info inputs in the Deposit cmp
- Created the handleChange() method in the Deposit cmp to synchronize the
  inputs with the state of the cmp

> 24/3/20
- Added controlled inputs to the transferMoneyToAccount cmp
- Added handleChange() and handleSubmit() methods to the Deposit
  and transferMoneyToAccount cmps
- The transferMoneyToAccount cmp now sends money from the default account
  to another account according to the input (for now its the second account to 
  check the functionality). The new balances of the accounts are logged in the
  console
- Implemented the Deposit cmp placeholder functionality. The walletBalance 
  state of the App cmp is now synchronized with the changes in the Deposit and
  transferMoneyToAccount cmps

> 26/3/20
- Created a mini server with Python3 and Flask
- Moved the CoinLayer API request to the backend
- The Rates cmp now calls the server method which makes the API request in order
  to keep the API_KEY safe

> 27/3/20
- New server method to dynamically retrieve the address of the contract

> 28/3/20
- Created the server-database connection

> 29/3/20
- Created a basic data model
- Created the structure of the classes - Tables to be used by SqlAlchemy
- Created the structure of the classes - methods called by the frontend
- Added the API request get the Contracts saved in the db 
- Created the exposed method in the server

> 30/3/20
- Made the get request to get the existing Contracts

> 31/3/20
- Mapped the existing Contracts to JSX in order to show them in the page

> 6/4/20
- Implemented the add Contract method
- Implemented the update Contract method
- Implemented the delete Contract method
- The values returned from the query are now ordered by address

> 25/4/20
- Deployment to rinkeby testnet
- Management of funds of both accounts

> 27/4/20
- Changes to the App cmp in order to work in the testnet
- Changes to the Deposit cmp in order to work in the testnet
- Changes to the transferMoneyToAccount cmp in order to work in the testnet

> 3/5/20
- Implemented basic backend login functionality

> 4/5/20
- Started warking on JWT Token

> 5/5/20
- Added the JWT crete method

> 6/5/20
- Added the JWT check method

> 7/5/20
- The JWT token now returns to the frontend afte the login
- Thes token is passed from the UserManagement cmp to the app cmp and saved to the App state

> 8/5/20
- Added the userId column in the contracts table to be able to represent a 1->N relationship
- Started cleaning up code - Moved JWT token logic to an other file

> 20/6/20
- Improving the UI

> 23/6/20
- Fixing the login functionality to work on refresh by saving the JWT Token in the LocalStorage